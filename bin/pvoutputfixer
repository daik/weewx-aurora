#!/usr/bin/env python
#
# pvoutputfixer
#
# A utility to fill missing data on PVOutput.
#
# Inspired by and based on wunderfixer.py, a weeWX utility by Tom Keffer.
#
# Copyright (C) 2017 Gary Roderick                  gjroderick<at>gmail.com
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see http://www.gnu.org/licenses/.
#
# Version: 0.2                                      Date: 14 February 2017
#
# Revision History
#   14 February 2017    v0.2    -
#   11 December 2016    v0.1    - initial release
#
"""This utility goes through all records in a weeWX archive for a given day,
comparing to see whether a corresponding record exists on PVOutput. If not, it
will publish a new record on PVOutput with the missing data.
"""

import csv
import datetime
import optparse
import re
import socket
import sys
import syslog
import time
import urllib2

import weecfg
import weeutil
import weewx.manager
import weewx.restx
import user.pvoutput
from weeutil.weeutil import timestamp_to_string

usagestr = """%prog CONFIG_FILE|--config=CONFIG_FILE
                  [--binding=BINDING_NAME]
                  [--system=SYSTEM_ID] [--apikey=API_KEY]
                  [--datetime=TIMESTAMP]
                  [--verbose] [--log LOG_FACILITY] [--test] [--query]
                  [--help]

This utility fills in missing status data on PVOutput. It goes through all
records in a weeWX archive for a given day, comparing to see whether a
corresponding record exists on PVOutput. If not, it will publish a new record
on PVOutput with the missing data.
"""

__version__ = "0.2"

# PVOutput manifest. Map of weeWX field to PVOutput addstatus/addbatchstatus
# field.
manifest = {'energy': 'v1',
            'gridPower': 'v2',
            'energyCons': 'v3',
            'powerCons': 'v4',
            'inverterTemp': 'v5',
            'gridVoltage': 'v6',
            'extended1': 'v7',
            'extended2': 'v8',
            'extended3': 'v9',
            'extended4': 'v10',
            'extended5': 'v11',
            'extended6': 'v12'}

# non-None fields required to post a batch status
batch_required = ['energy']

# The number of seconds difference in the timestamp between two records
# and still have them considered to be the same:
epsilon = None

# Instance of our logger
wlog = None

socket.setdefaulttimeout(10.0)

def main() :
    """Main program body for pvoutpufixer."""
    global epsilon, wlog

    parser = optparse.OptionParser(usage=usagestr)
    parser.add_option("-c", "--config", type="string", dest="config",
                      metavar="CONFIG_FILE",
                      help="Use configuration file CONFIG_FILE.")
    parser.add_option("-b", "--binding", type="string", dest="binding",
                      metavar="BINDING_NAME", default='aurora_binding',
                      help="The database binding to be used. Default is"
                      " 'aurora_binding'.")
    parser.add_option("-s", "--system", type="string", dest="system_id",
                      help="PVOutput system ID. Optional."
                      " Default is taken from the configuration file.")
    parser.add_option("-a", "--apikey", type="string", dest="api_key",
                      help="PVOutput system API key. Optional. "
                      "Default is taken from the configuration file.")
    parser.add_option("-d", "--date", type="string", dest="date",
                      metavar="YYYY-mm-dd",
                      help="Date to check as a string of form YYYY-mm-dd."
                      " Default is today.")
    parser.add_option("-e", "--epsilon", type="int", dest="epsilon",
                      metavar="SECONDS", default=120,
                      help="Timestamps within this value in seconds compare"
                      " true. Default is 120.")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                      help="Print useful extra output.")
    parser.add_option("-l", "--log", type="string", dest="logging",
                      metavar="LOG_FACILITY",
                      help="Log selected output to syslog. If omitted no syslog"
                      " logging occurs. If LOG_FACILITY is 'weewx' then logs"
                      " are written to the same log used by weeWX. Any other"
                      " parameter will log to syslog.")
    parser.add_option("-t", "--test", action="store_true", dest="simulate",
                      help="Test what would happen, but don't do anything.")
    parser.add_option("-q", "--query", action="store_true", dest="query",
                      help="For each record, query the user before making a"
                      " change.")

    (options, args) = parser.parse_args()

    # Set up our syslog
    wlog = PVOutputLog(options.logging, options.verbose)

    # get our config file
    config_fn, config_dict = weecfg.read_config(options.config, args)
    _msg = "Using weeWX configuration file %s." % config_fn
    print >>sys.stdout, _msg
    wlog.slog(syslog.LOG_INFO, _msg)

    # Retrieve the system ID and api key from the config file
    try:
        if not options.system_id:
            options.system_id = config_dict['StdRESTful']['PVOutput']['system_id']
        if not options.api_key:
            options.api_key = config_dict['StdRESTful']['PVOutput']['api_key']
    except KeyError:
        _msg = "Missing PVOutput system ID and/or API key"
        wlog.slog(syslog.LOG_ERR, _msg)
        exit(_msg)

    # exit if any essential arguments are not present
    if not options.system_id or (not options.api_key and not options.simulate):
        print >>sys.stdout, "Missing argument(s).\n"
        print >>sys.stdout, parser.parse_args(["--help"])
        _msg = "Missing argument(s). PVOutputfixer exiting."
        wlog.slog(syslog.LOG_ERR, _msg)
        exit(_msg)

    # get our binding and database and say what we are using
    db_binding = options.binding
    database = config_dict['DataBindings'][db_binding]['database']
    _msg = "Using database binding '%s', which is bound to database '%s'" % (db_binding,
                                                                             database)
    print >>sys.stdout, _msg
    wlog.slog(syslog.LOG_INFO, _msg)

    # get the manager object for our db_binding
    dbmanager_t = weewx.manager.open_manager_with_config(config_dict, db_binding)

    _ans = 'y'
    if options.simulate:
        options.query = False
        _ans = 'n'

    if options.query:
        options.verbose = True;

    if options.date:
        date_tt = time.strptime(options.date, "%Y-%m-%d")
        date_date = datetime.date(date_tt[0], date_tt[1], date_tt[2])
    else:
        # If no date option was specified on the command line, use today's date:
        date_date = datetime.date.today()

    epsilon = options.epsilon

    if options.verbose:
        print >>sys.stdout, "PVOutput System: %s" % options.system_id
        print >>sys.stdout, "Date to check:   %s" % date_date.strftime('%Y-%m-%d')
        wlog.slog(syslog.LOG_INFO,
                  "Checking PVOutput system '%s' data for date %s" % (options.system_id,
                                                                      date_date.strftime('%Y-%m-%d')))


    # Get all the time stamps in the archive for the given day:
    archive_results = getArchiveDayTimeStamps(dbmanager_t, date_date)
    if options.verbose:
        print >>sys.stdout, "Number of archive records found for %s: %d" % (date_date.strftime('%Y-%m-%d'),
                                                                            len(archive_results))

    # Get a PVOutputAPI object so we can interact with PVOutput
    pvoutput = user.pvoutput.PVOutputAPI(sid=options.system_id,
                                         api_key=options.api_key,
                                         server_url=user.pvoutput.StdPVOutput.api_url,
                                         protocol_name = "pvoutputfixer",
                                         max_tries = 3,
                                         retry_wait = 2,
                                         timeout = 5,
                                         softwaretype = "pvoutputfixer-%s" % __version__)

    # The max size of a batch status update and the max age of statuses that
    # can be uploaded depends on whether the station has donor status. Query
    # PVOutput to get these limits for the station.
    system = pvoutput.getsystem(donations=1)
    if system[0]['donations'] == '1':
        max_batch_size = 100
        max_age = 90
    else:
        max_batch_size = 30
        max_age = 14
    if options.verbose:
        print >>sys.stdout, "Status' will be posted in batches of %d" % max_batch_size
        print >>sys.stdout, "Status' older than %d days will be ignored" % max_age

    _api_date_str = date_date.strftime('%Y%m%d')
    _response = pvoutput.getstatus(history=1,
                                   date=date_date.strftime('%Y%m%d'))
    pv_results = []
    if _response and len(_response) > 0:
        for _entry in _response:
            _datetime = ''.join([_entry['date'], ' ', _entry['time']])
            try:
                _dt = datetime.datetime.strptime(_datetime, '%Y%m%d %H:%M')
                _ts = time.mktime(_dt.timetuple())
                pv_results.append(TimeStamp(_ts))
            except ValueError:
                pass
    missing_records = sorted([x for x in archive_results if not x in pv_results])
    _msg = "%d missing status records identified" % len(missing_records)
    print >>sys.stdout, _msg
    wlog.slog(syslog.LOG_INFO, _msg)

    no_published = 0
    recs = []
    # Loop through the missing timestamps and generate a list of records to be
    # posted
    for time_TS in missing_records:
        # get the actual timestamp from the TimeStamp object
        ts = time_TS.ts
        # get the archive record for this timestamp
        record = dbmanager_t.getRecord(ts)
        # now get the subset of fields from record that may be posted to
        # PVOutput
        # initialise the subset with the timestamp of the record
        _rec = {}
        _rec['dateTime'] = record['dateTime']
        # generate the subset of this record for posting
        for wf in manifest:
            if wf in record:
                _rec[wf] = record[wf]

        # Check if we have any data to post. This is a 2 part check, first do
        # we have any data in the required fields for this record and finally
        # is the record age within the max age PVOutput allows for status
        # uploads.
        # initialise a flag indicating if this record has data to post
        data_to_post = False
        _diff_dt = datetime.datetime.now() - datetime.timedelta(days=max_age)
        if datetime.datetime.fromtimestamp(_rec['dateTime']) > _diff_dt:
            # the record is not too old so check for data
            for wf in batch_required:
                if wf in _rec and _rec[wf] is not None:
                    # One of the required fields has data so yes we have data.
                    # Set our flag and break.
                    data_to_post = True
                    break
        # if this record has no data to post then move onto the next record
        if not data_to_post:
            continue

        # if this is an interactive session (option "-q") see if the user wants
        # to post it
        if options.query:
            _ans=raw_input("...fix? (y/n/a/q):")
            if _ans == "q" :
                print >>sys.stdout, "Quitting."
                wlog.slog(syslog.LOG_DEBUG, "... exiting")
                exit()
            if _ans == "a" :
                _ans = "y"
                options.query=False

        if _ans == 'y':
            # the record is to be added so add it to our list for a batch
            # upload later
            recs.append(_rec)
        else:
            # the user did not want to add this record
            print >>sys.stdout, print_record(_rec), "... skipped."
            wlog.slog(syslog.LOG_DEBUG,
                      "%s ...skipped" % timestamp_to_string(_rec['dateTime']))
    # We now have a list of records to upload to PVOutput. Do this as a batch
    # upload but be mindful of the max records we can upload at once - it
    # depends on whether we are a PVOutput donor.
    tranche = []
    no_posted = 0
    for rec in recs:
        tranche.append(rec)
        if len(tranche) >= max_batch_size:
            if not options.simulate:
                _response = pvoutput.addbatchstatus(tranche)
                for _t in tranche:
                    print >>sys.stdout, print_record(_t), "... uploaded."
                no_posted += len(_response.split(";"))
            else:
                no_posted += len(tranche)
            tranche = []
            continue
    if len(tranche) > 0:
        if not options.simulate:
            _response = pvoutput.addbatchstatus(tranche)
            for _t in tranche:
                print >>sys.stdout, print_record(_t), "... uploaded."
            no_posted += len(_response.split(";"))
        else:
            no_posted += len(tranche)
    _msg = "%d out of %d missing status records published to system ID '%s'" % (no_posted,
                                                                                len(missing_records),
                                                                                options.system_id)
    _msg1 = "for date %s." % date_date
    print >>sys.stdout, _msg
    print >>sys.stdout, _msg1
    wlog.slog(syslog.LOG_INFO, "%s %s" % (_msg, _msg1))
    wlog.slog(syslog.LOG_INFO, "pvoutputfixer exiting.")


# ============================================================================
#                             class TimeStamp
# ============================================================================


class TimeStamp(object):
    """This class represents a timestamp. It uses a 'fuzzy' compare.
    That is, if the times are within epsilon seconds of each other, they compare true."""

    def __init__(self, ts):
        self.ts = ts

    def __cmp__(self, other_ts):
        if self.__eq__(other_ts):
            return 0
        return 1 if self.ts > other_ts.ts else -1

    def __hash__(self):
        return hash(self.ts)

    def __eq__(self, other_ts):
        return abs(self.ts - other_ts.ts) <= epsilon

    def __str__(self):
        return timestamp_to_string(self.ts)


# ============================================================================
#                            class PVOutputLog
# ============================================================================


class PVOutputLog(object):
    """A wrapper around the syslog module to handle pvoutputfixer logging."""

    def __init__(self, log_facy, verbose):
        """Initialise our syslog environment."""

        # flag to indicate whether we are logging to file or not
        # if we have a file name then log, otherwise don't
        self.log = False if log_facy is None else True
        # syslog log facility to be used
        self.log_facy = log_facy
        # if we are logging then setup our syslog environment
        # if --verbose we log up to syslog.LOG_DEBUG
        # otherwise just log up to syslog.LOG_INFO
        if self.log:
            syslog.openlog(log_facy, syslog.LOG_PID|syslog.LOG_CONS)
            if verbose:
                syslog.setlogmask(syslog.LOG_UPTO(syslog.LOG_DEBUG))
            else:
                syslog.setlogmask(syslog.LOG_UPTO(syslog.LOG_INFO))

    def slog(self, level, message):
        """Method to log to syslog if required."""

        # are we logging ?
        if self.log:
            # if logging to 'weewx' then add a little preamble to say this is wunderfixer
            _message = message if self.log_facy != 'weewx' else 'pvoutputfixer: ' + message
            syslog.syslog(level, _message)

# ============================================================================
#                             Utility functions
# ============================================================================

# The formats to be used to print the record. For each type, there are two
# formats, the first to be used for a valid value, the second for value
# 'None'
_formats = (('energy'      , ('%4.0fWh', 'N/A Wh')),
            ('gridPower'   , ('%7.1fW',  '   N/A W')),
            ('gridVoltage' , ('%6.1fV',  '  N/A V')),
            ('inverterTemp', ('%6.1fC',  '  N/A C')))

def print_record(record):
    # Start with a formatted version of the time:
    _strlist = [timestamp_to_string(record['dateTime'])]

    # Now add the other types, in the order given by _formats:
    for (_type, _format) in _formats:
        _val = record.get(_type)
        _strlist.append(_format[0] % _val if _val is not None else _format[1])
    # _strlist is a list of strings. Convert it into one long string:
    _string_result = ';'.join(_strlist)
    return _string_result

def getArchiveDayTimeStamps(dbmanager, dayRequested):
    """Returns all time stamps in a weeWX archive for a given day

    dayRequested: An instance of datetime.date

    returns: A list containing instances of TimeStamps
    """

    # Get the ordinal number for today and tomorrow
    start_ord = dayRequested.toordinal()
    end_ord   = start_ord + 1

    # Convert them to instances of datetime.date
    start_date = datetime.date.fromordinal(start_ord)
    end_date   = datetime.date.fromordinal(end_ord)

    # Finally, convert those to epoch time stamps.
    # The result will be two timestamps for the two midnights
    # E.G., 2009-10-25 00:00:00 and 2009-10-26 00:00:00
    start_ts = time.mktime(start_date.timetuple())
    end_ts   = time.mktime(end_date.timetuple())

    _gen_rows =  dbmanager.genSql("""SELECT dateTime FROM archive WHERE dateTime>=? AND dateTime<?""",
                                  (start_ts, end_ts))
    timeStamps = [TimeStamp(_row[0]) for _row in _gen_rows]

    return timeStamps

# ============================================================================
#                           Call main program body
# ============================================================================

if __name__=="__main__" :
    main()
